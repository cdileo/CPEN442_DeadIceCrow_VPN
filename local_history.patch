Index: VpnClient.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- VpnClient.py	(revision )
+++ VpnClient.py	(revision )
@@ -3,14 +3,19 @@
 import select
 import sys
 from Parser import Parser
-from Crypto.Cipher import AES
-from Crypto import Random
+from enum import Enum
 
-
 # Constants
 BUFFER_SIZE = 4096
 
 
+class State(Enum):
+    Init = 0
+    KeyX = 1
+    Challenge = 2
+    Send = 3
+
+
 class VpnClient(threading.Thread):
 
     def __init__(self, server, port, crypto):
@@ -19,6 +24,7 @@
         self.socket_list = []
         self.my_socket = None
         self.crypto = crypto
+        self.state = State.Init
 
     """
     FUNCTION
@@ -51,28 +57,47 @@
             for sock in ready_to_read:
                 if sock == self.mysocket:
                     # if this is our socket then read from it
+                    while self.state != State.Final:
+                        if self.state == State.Init:
+                            print("INIT")
+                            #we're in the key exchange, expecting nonce then id
+
-                    data = sock.recv(BUFFER_SIZE)
-                    data = data.decode()
-                    # If you can't read - connection interruption - exit
-                    if not data:
-                        print ('\nDisconnected from chat server')
-                        sys.exit()
-                    else:
+                            data = sock.recv(BUFFER_SIZE)
+                            data = data.decode()
+                            # If you can't read - connection interruption - exit
+                            if not data:
+                                print ('\nDisconnected from chat server')
+                                sys.exit()
+                            else:
-                        # print data
-                        parser = Parser()
-                        response = parser.parse_data(data)
+                                parser = Parser()
+                                response = parser.parse_data(data)
+                                self.crypto.peer_nonce = response[0]
+                                self.crypto.id = response[1]
+                                self.state = State.KeyX
 
-                        if response:
-                            self.send_challenge_response()
+                        elif self.state == State.KeyX:
+                            print("KEYX")
+                        #   send challenge response
+                            send_data = self.send_challenge_response()
+                            sock.send(send_data)
+                            self.state = State.Challenge
+
+                        elif self.state == State.Challenge:
+                            print("CHALLENGE")
+                        #   verify response from 'Alice'
                         else:
+                            print("BREAK")
+                            break
+
+                    else:
-                            print("[ERROR] Authentication failed. Exiting.")
-                            sys.exit(1)
+                        print("[ERROR] Authentication failed. Exiting.")
+                        sys.exit(1)
 
-                        sys.stdout.write(str(sock.getpeername()))
-                        sys.stdout.write(": ")
-                        sys.stdout.write(data)
-                        sys.stdout.write('[Me] ')
-                        sys.stdout.flush()
+                    sys.stdout.write(str(sock.getpeername()))
+                    sys.stdout.write(": ")
+                    sys.stdout.write(data)
+                    sys.stdout.write('[Me] ')
+                    sys.stdout.flush()
 
                 else:
                     # Read and send user's message
@@ -97,10 +122,6 @@
     """
     def send_challenge_response(self):
         # generate the nonce
-        # TODO we need to send an IV
-        #
-        # encrpt {ID, A's nonce, our session key part} with Master key
-        id = self.crypto.id
-        nonce = self.crypto.my_nonce
-        part_session_key = self.crypto.gen_session_key()
-        return
\ No newline at end of file
+        # encrypt {ID, A's nonce, our session key part} with Master key
+        msg = "%s%s" % (self.crypto.my_nonce, self.crypto.encrypt_all())
+        return msg
\ No newline at end of file
